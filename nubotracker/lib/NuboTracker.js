/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the GNU Lesser General Public License (LGPL)
 * version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var disguise = kurentoClient.disguise;

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;


var Transaction = kurentoClient.TransactionsManager.Transaction;

var Filter = kurentoClient.register.abstracts.Filter;


function noop(error, result) {
  if (error) console.trace(error);

  return result
};


/**
 * Create an element
 *
 * @classdesc
 *  NuboTracker interface. Documentation about the module
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:nubotracker.NuboTracker
 */
function NuboTracker(){
  NuboTracker.super_.call(this);
};
inherits(NuboTracker, Filter);


//
// Public methods
//

/**
 * Set up the Maximum area of the object
 *
 * @alias module:nubotracker.NuboTracker.setDistance
 *
 * @param {external:Integer} distance
 *  the maximum area of the object
 *
 * @param {module:nubotracker.NuboTracker~setDistanceCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboTracker.prototype.setDistance = function(distance, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'distance', distance, {required: true});

  var params = {
    distance: distance
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setDistance', params, callback), this)
};
/**
 * @callback module:nubotracker.NuboTracker~setDistanceCallback
 * @param {external:Error} error
 */

/**
 * Set up the Maximum area of the object
 *
 * @alias module:nubotracker.NuboTracker.setMaxArea
 *
 * @param {external:Number} maxArea
 *  the maximum area of the object
 *
 * @param {module:nubotracker.NuboTracker~setMaxAreaCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboTracker.prototype.setMaxArea = function(maxArea, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('float', 'maxArea', maxArea, {required: true});

  var params = {
    maxArea: maxArea
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setMaxArea', params, callback), this)
};
/**
 * @callback module:nubotracker.NuboTracker~setMaxAreaCallback
 * @param {external:Error} error
 */

/**
 * Set up the Minimun area of the object
 *
 * @alias module:nubotracker.NuboTracker.setMinArea
 *
 * @param {external:Integer} minArea
 *  the minimum area of the object
 *
 * @param {module:nubotracker.NuboTracker~setMinAreaCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboTracker.prototype.setMinArea = function(minArea, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'minArea', minArea, {required: true});

  var params = {
    minArea: minArea
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setMinArea', params, callback), this)
};
/**
 * @callback module:nubotracker.NuboTracker~setMinAreaCallback
 * @param {external:Error} error
 */

/**
 * Minimum diferece among pixels  to detect motion
 *
 * @alias module:nubotracker.NuboTracker.setThreshold
 *
 * @param {external:Integer} threshold
 *  Set the threshold
 *
 * @param {module:nubotracker.NuboTracker~setThresholdCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboTracker.prototype.setThreshold = function(threshold, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'threshold', threshold, {required: true});

  var params = {
    threshold: threshold
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setThreshold', params, callback), this)
};
/**
 * @callback module:nubotracker.NuboTracker~setThresholdCallback
 * @param {external:Error} error
 */

/**
 * Set up the visual Mode of the output video
 *
 * @alias module:nubotracker.NuboTracker.setVisualMode
 *
 * @param {external:Integer} mode
 *  0 => normal video; 1=>normal video + object trackerd; 2=> diff images + 
 *  object tracked; 3=> motion histagram + object tracked
 *
 * @param {module:nubotracker.NuboTracker~setVisualModeCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboTracker.prototype.setVisualMode = function(mode, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'mode', mode, {required: true});

  var params = {
    mode: mode
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setVisualMode', params, callback), this)
};
/**
 * @callback module:nubotracker.NuboTracker~setVisualModeCallback
 * @param {external:Error} error
 */


/**
 * @alias module:nubotracker.NuboTracker.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the parent {@link module:core.MediaPipeline MediaPipeline}
 */
NuboTracker.constructorParams = {
  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  }
};

/**
 * @alias module:nubotracker.NuboTracker.events
 *
 * @extends module:core/abstracts.Filter.events
 */
NuboTracker.events = Filter.events;


/**
 * Checker for {@link module:nubotracker.NuboTracker}
 *
 * @memberof module:nubotracker
 *
 * @param {external:String} key
 * @param {module:nubotracker.NuboTracker} value
 */
function checkNuboTracker(key, value)
{
  if(!(value instanceof NuboTracker))
    throw ChecktypeError(key, NuboTracker, value);
};


module.exports = NuboTracker;

NuboTracker.check = checkNuboTracker;
